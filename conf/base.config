/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

process {

    cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: DiamondDB {
        cpus   = { check_max( 4                   , 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: DiamondBLASTp {
        cpus   = { check_max( 14    * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: HMMsearch {
        cpus   = { check_max( 8     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: NetworkMcxload {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: NetworkMcl {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: NetworkMcxdump {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: HomogeneityScore {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: PlotHomogeneityScore {
        cpus   = { check_max( 6     * task.attempt, 'cpus'   ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: PlotClusterSize {
        cpus   = { check_max( 6     * task.attempt, 'cpus'   ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }

    withName: NetworkMclToTsv {
        cpus   = { check_max( 14     * task.attempt, 'cpus'   ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h  * task.attempt, 'time'   ) }
    }
}

/*
PLEASE DO NOT MODIFY THIS FILE (UNLESS YOU KNOW WHAT YOU DOING)
*/


