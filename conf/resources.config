/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

process {

    cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB  * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    /* small ressources */

    withName: ALPHAFOLD_INFORMATIONS {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    //withName: AlphafoldNetwork {
    //    cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
    //    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    //    time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    //}

    withName: HOMOGENEITY_SCORE {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: HTML_REPORT {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    /* medium ressources */

    withName: DIAMOND_BLASTP {
        cpus   = { check_max( 30    * task.attempt, 'cpus'   ) }
        memory = { check_max( 80.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: FILTER_ALIGNMENTS {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 80.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: GRAPH_CLUSTERING {
        cpus   = { check_max( 50    * task.attempt, 'cpus'   ) }
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: SEQUENCES_FILES {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: SEQUENCES_PROCESSING {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: FILTER_ALIGNMENTS {
        cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    /* large ressources */

    withName: MMSEQS_SEARCH {
        cpus   = { check_max( 50     * task.attempt, 'cpus'   ) }
        memory = { check_max( 150.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h   * task.attempt, 'time'   ) }
    }
}

/*
PLEASE DO NOT MODIFY THIS FILE (UNLESS YOU KNOW WHAT YOU DOING)
*/
