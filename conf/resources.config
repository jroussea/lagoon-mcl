/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

process {

    cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB  * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    /* small ressources */

    withName: AlphafoldInformations {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: AlphafoldNetwork {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: HomogeneityScore {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    /* medium ressources */

    withName: DiamondBLASTp {
        cpus   = { check_max( 30    * task.attempt, 'cpus'   ) }
        memory = { check_max( 50.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: FiltrationAlnNetwork {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 80.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: NetworkMcl {
        cpus   = { check_max( 40    * task.attempt, 'cpus'   ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    withName: NodesFiles {
        cpus   = { check_max( 10    * task.attempt, 'cpus'   ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }

    /* large ressources */

    withName: MMseqsSearch {
        cpus   = { check_max( 50    * task.attempt, 'cpus'   ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
    }
}

/*
PLEASE DO NOT MODIFY THIS FILE (UNLESS YOU KNOW WHAT YOU DOING)
*/