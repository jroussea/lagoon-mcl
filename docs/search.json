[
  {
    "objectID": "command.html",
    "href": "command.html",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "--help\n\nShow help.\n\n--max_cpus &lt;int&gt;, default: 200\n\nMaximum number of CPUs that can be used by a process.   If the maximum CPU is exceeded, pipeline execution is killed.\n\n--max_memory &lt;flaot.GB&gt;, default: 750.GB\n\nNombre de RAM maximum pouvant être utilisé par un process\nIf the maximum RAM is exceeded, pipeline execution is killed.\n\n--max_time &lt;int.h&gt;, default: 350.h\n\nMaximum execution time for a process.\nIf the maximum time is exceeded, pipeline execution is killed.\n\n-w / --workdir &lt;path&gt;, default: /path/to/lagoon-mcl/wordir\n\nPath to pipeline working directory.\n\n--projectName &lt;str&gt;, default: lagoon-mcl\n\nProject name. Used to name the working directory.\n\n-resume\n\nTo be specified when restarting the pipeline if there was a problem during execution. Nextflow will used cached results from any pipeline steps where the inputs are the same, continuing from where it stopped."
  },
  {
    "objectID": "command.html#general-parameters",
    "href": "command.html#general-parameters",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "--help\n\nShow help.\n\n--max_cpus &lt;int&gt;, default: 200\n\nMaximum number of CPUs that can be used by a process.   If the maximum CPU is exceeded, pipeline execution is killed.\n\n--max_memory &lt;flaot.GB&gt;, default: 750.GB\n\nNombre de RAM maximum pouvant être utilisé par un process\nIf the maximum RAM is exceeded, pipeline execution is killed.\n\n--max_time &lt;int.h&gt;, default: 350.h\n\nMaximum execution time for a process.\nIf the maximum time is exceeded, pipeline execution is killed.\n\n-w / --workdir &lt;path&gt;, default: /path/to/lagoon-mcl/wordir\n\nPath to pipeline working directory.\n\n--projectName &lt;str&gt;, default: lagoon-mcl\n\nProject name. Used to name the working directory.\n\n-resume\n\nTo be specified when restarting the pipeline if there was a problem during execution. Nextflow will used cached results from any pipeline steps where the inputs are the same, continuing from where it stopped."
  },
  {
    "objectID": "command.html#input-parameter",
    "href": "command.html#input-parameter",
    "title": "LAGOON-MCL",
    "section": "Input parameter",
    "text": "Input parameter\n\n--fasta &lt;file&gt;, default: null\n\nPath to fasta files.   If several fasta files are used, the quotes \" are mandatory.\n--fasta \"path/to/your/fasta/*.fasta\""
  },
  {
    "objectID": "command.html#ouput-parameter",
    "href": "command.html#ouput-parameter",
    "title": "LAGOON-MCL",
    "section": "Ouput parameter",
    "text": "Ouput parameter\n\noutdir &lt;path&gt;, default: results\n\nDirectory containing LAGOON-MCL results."
  },
  {
    "objectID": "command.html#sequence-similarity-network",
    "href": "command.html#sequence-similarity-network",
    "title": "LAGOON-MCL",
    "section": "Sequence Similarity Network",
    "text": "Sequence Similarity Network\nSequences are aligned using Diamond BLASTp.\n\n--alignment_file &lt;file&gt;, default: null\n\nIf you already have an alignment file for your sequences, you can specify it with this command. If this option is not null, then BLASTp alignment will not be performed.\nFor the file format, please refer to the input section.\n--alignment_file path/to/your/alignment/alignment.tsv\n\n--sensitivity, default: very-sensitive\n\nAlignment sensitivity mode. You can choose between: fast, mid-sensitive, sensitive, more-sensitive, very-sensitive, ultra-sensitive.\n\n--matrix, default: BLOSUM62\n\nScore matrix. You can use: BLOSUM45, BLOSUM50, BLOSUM80, BLOSUM90, PAM250, PAM70, PAM30.\n\n--diamond_evalue, default: 0.001\n\nMaximum expected value to report an alignment\n\n\n\n\n\n\nNote\n\n\n\nFor more information on how to use Diamond BLASTp’s specific parameters, please consult the documentation."
  },
  {
    "objectID": "command.html#clustering",
    "href": "command.html#clustering",
    "title": "LAGOON-MCL",
    "section": "Clustering",
    "text": "Clustering\nThe network is clustered using the Markov CLustering algorithm.\n\n--I &lt;list&gt;, default: 1.4,2\n\nThe inflation parameter is MCL’s main means of influencing clustering granularity. It is generally chosen in a range between 1.2 and 5.0. 1.2 will produce coarse clustering. 5.0 will produce fine clustering. * --max_weight, default: 200\nThe evalue is used as a weight for the edges. It is transformed into logarithm base 1 to negative. This parameter can be used to set a maximum weight.\n\n--cluster_size, default: 3\n\nKeeps only clusters with a minimum size.\n\n\n\n\n\n\nNote\n\n\n\nFor more information on how to use MCL, please consult the documentation."
  },
  {
    "objectID": "command.html#annotation-files",
    "href": "command.html#annotation-files",
    "title": "LAGOON-MCL",
    "section": "Annotation files",
    "text": "Annotation files\n\n--annotation_files, default: null\n\nIf you provide annotation files (functions, taxonomies, …), they can be given to workflows with this parameter. A file must be supplied for each annotation type, and each file must contain two columns, the first column containing the sequence identifier and the second column the annotation (e.g. Pfam).\n--annotation_files \"/path/to/your/annotation_files/*tsv\"\n\n\n\n\n\n\nNote\n\n\n\nSee Input files for more information on the format of the file."
  },
  {
    "objectID": "command.html#pfam",
    "href": "command.html#pfam",
    "title": "LAGOON-MCL",
    "section": "Pfam",
    "text": "Pfam\nIf you don’t have a functional annotation, LAGOON-MCL can scan the Pfam database with MMseqs2.\n\n--scan_pfam, default: false\n\nTrue: LAGOON-MCL uses MMseqs2 to scan Pfam. False: LAGOON-MCL does not scan Pfam.\n\n--pfam_db, default: null\n\nPath to Pfam database. It must have been created and indexed with MMseqs2.\n\npfam_name, default: null\n\nDatabase name."
  },
  {
    "objectID": "command.html#esm-metagenomic-atlas",
    "href": "command.html#esm-metagenomic-atlas",
    "title": "LAGOON-MCL",
    "section": "ESM Metagenomic Atlas",
    "text": "ESM Metagenomic Atlas\nYou can scan the ESM Metagenomic Atlas database for initial information on the three-dimensional structure of proteins.\n\nscan_esm, default: false\n\nTrue: LAGOON-MCL uses MMseqs2 to scan ESM Metagenomic Atlas. False: LAGOON-MCL does not scan ESM Metagenomic Atlas.\n\nesm_db, default: null\n\nPath to ESM Metagenomic Atlas database. It must have been created and indexed with MMseqs2.\n\nesm_name, default: null\n\nDatabase name."
  },
  {
    "objectID": "input.html",
    "href": "input.html",
    "title": "Fasta files",
    "section": "",
    "text": "During pipeline execution, only the first part of the sequence headers is retained. It is therefore important that the sequence identifier is unique. Sequences in the fasta file can be single or multi-line."
  },
  {
    "objectID": "input.html#annotation-files",
    "href": "input.html#annotation-files",
    "title": "Fasta files",
    "section": "Annotation files",
    "text": "Annotation files\nYou must provide one file for each type of annotation/information. If you have Pfam and CATH/Gene3D annotations, you will need to provide two separate files. If you have taxonomic information about sequences, you should provide one file for each taxonomic level. (e.g. a file for class, a file for phylum, a file for family, a file for genus and a file for species)\nFiles must be in TSV (tabulation-separated values) format, with two columns. The first column contains the sequence identifier, the second column must contain the annotation (if a sequence has several annotations, they must be present on several lines). Files must not have headers.\nExample for a CATH/Gene3D annotation file (gene3d.tsv):\n\n\n+--------------+--------------+\n| sequenceID_1 | 1.25.10.10   |\n+--------------+--------------+\n| sequenceID_2 | 1.25.10.10   |\n+--------------+--------------+\n| sequenceID_3 | 3.40.50.300  |\n+--------------+--------------+\n| sequenceID_3 | 1.20.1560.10 |\n+--------------+--------------+\n| sequenceID_3 | 3.40.50.300  |\n+--------------+--------------+\n| sequenceID_4 | 3.40.50.460  |\n+--------------+--------------+\n| sequenceID_4 | 1.10.10.480  |\n+--------------+--------------+\n| sequenceID_4 | 3.40.50.450  |\n+--------------+--------------+\n| sequenceID_5 | 1.20.990.10  |\n+--------------+--------------+\n| sequenceID_6 | 2.40.30.10   |\n+--------------+--------------+\n\n\nExample for a taxonomic file (species.tsv):\n\n\n+--------------+-----------------------+\n| sequenceID_1 | Gymnodinium_catenatum |\n+--------------+-----------------------+\n| sequenceID_2 | Gymnodinium_catenatum |\n+--------------+-----------------------+\n| sequenceID_3 | Gymnodinium_catenatum |\n+--------------+-----------------------+\n| sequenceID_1 | Alexandrium_pacificum |\n+--------------+-----------------------+\n| sequenceID_2 | Alexandrium_pacificum |\n+--------------+-----------------------+\n| sequenceID_3 | Alexandrium_pacificum |\n+--------------+-----------------------+\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s important that file names are self-explanatory (e.g. pfam.tsv, gene3d.tsv, species.tsv)."
  },
  {
    "objectID": "input.html#blastp-alignment",
    "href": "input.html#blastp-alignment",
    "title": "Fasta files",
    "section": "BLASTp alignment",
    "text": "BLASTp alignment\nIf you already have an even alignment file (e.g. obtained with BLASTp), you can supply it to the pipeline, thus avoiding the need to recalculate the alignment. The file must consist of 3 columns separated by a tab:\n- column 1 query\n- column 2 subject\n- column 3 evalue\nThis table will be given to MCL.\n\n\n+--------+----------+-----------+\n| query1 | subject1 | 1.98e-77  |\n+--------+----------+-----------+\n| query1 | subject2 | 2.24e-168 |\n+--------+----------+-----------+\n| query2 | subject3 | 6.86e-18  |\n+--------+----------+-----------+\n| query3 | subject1 | 1.78e-40  |\n+--------+----------+-----------+\n| query4 | subject4 | 6.05e-37  |\n+--------+----------+-----------+\n| query5 | subject5 | 2.64e-07  |\n+--------+----------+-----------+"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "LAGOON-MCL has been designed to process large sets of protein sequences and their annotations using sequence similarity networks and clustering, while requiring as few resources as possible (CPUs and RAM) for each process.\nSequence similarity networks (or graphs) can be used to visualize the relationships between proteins. We can then apply graph clustering algorithms to build protein clusters. Because of the relationship that exists between proteins (similarity), the resulting clusters can be putative protein families, i.e. clusters made up of sequences with a similar function. LAGOON-MCL builds clusters in two steps (1) pairwise alignment of all sequences with Dimond BLASTp, construction of the SSN, (2) clustering of the network with Markov CLustering algorithm.\nLAGOON-MCL then links the annotations (e.g. functional, taxonomic, etc.) of the sequences to the clusters. A homogeneity score is calculated (more information here). This is an indication of the consistency of annotations within a cluster. For this, annotations can either be supplied by the user or determined by the pipeline using the Pfam database.\nFinally, LAGOON-MCL can use ESM Metagenomic Atlas to obtain initial information on the three-dimensional structure of proteins."
  },
  {
    "objectID": "index.html#presentation",
    "href": "index.html#presentation",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "LAGOON-MCL has been designed to process large sets of protein sequences and their annotations using sequence similarity networks and clustering, while requiring as few resources as possible (CPUs and RAM) for each process.\nSequence similarity networks (or graphs) can be used to visualize the relationships between proteins. We can then apply graph clustering algorithms to build protein clusters. Because of the relationship that exists between proteins (similarity), the resulting clusters can be putative protein families, i.e. clusters made up of sequences with a similar function. LAGOON-MCL builds clusters in two steps (1) pairwise alignment of all sequences with Dimond BLASTp, construction of the SSN, (2) clustering of the network with Markov CLustering algorithm.\nLAGOON-MCL then links the annotations (e.g. functional, taxonomic, etc.) of the sequences to the clusters. A homogeneity score is calculated (more information here). This is an indication of the consistency of annotations within a cluster. For this, annotations can either be supplied by the user or determined by the pipeline using the Pfam database.\nFinally, LAGOON-MCL can use ESM Metagenomic Atlas to obtain initial information on the three-dimensional structure of proteins."
  },
  {
    "objectID": "index.html#pipeline",
    "href": "index.html#pipeline",
    "title": "LAGOON-MCL",
    "section": "Pipeline",
    "text": "Pipeline"
  },
  {
    "objectID": "output.html#clustering",
    "href": "output.html#clustering",
    "title": "LAGOON-MCL",
    "section": "Clustering",
    "text": "Clustering"
  },
  {
    "objectID": "output.html#homogeneity-score",
    "href": "output.html#homogeneity-score",
    "title": "LAGOON-MCL",
    "section": "Homogeneity score",
    "text": "Homogeneity score\nThe homogeneity score is calculated for each annotation (e.g. functional, taxonomic, …).\nThis homogeneity score is calculated according to the following equations:\n\\[\nN_{annot} &gt; 1 =&gt; hom_{score} = \\frac{N_{annot}}{N_{protein}}\n\\] \\[\nN_{annot} = 1 =&gt; hom_{score} = 1\n\\]\nSi homscore &gt; 1:\nThis can happen when the number of different annotations exceeds the number of proteins in a cluster. In this case, the annotations that best explain the cluster are selected.\nhomscore : homogeneity score. homannot : number of different annotations in a cluster. homprotein : number of proteins in a cluster."
  },
  {
    "objectID": "output.html#lagoon-mcl-reports",
    "href": "output.html#lagoon-mcl-reports",
    "title": "LAGOON-MCL",
    "section": "LAGOON-MCL reports",
    "text": "LAGOON-MCL reports"
  },
  {
    "objectID": "output.html#nextflow-reports",
    "href": "output.html#nextflow-reports",
    "title": "LAGOON-MCL",
    "section": "Nextflow reports",
    "text": "Nextflow reports"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "LAGOON-MCL uses Nextflow as workflow manager, and Singlularity as container manager. If you’re using it on a cluster, Nextflow handles job submission (SLURM, PBS, …). To use LAGOON-MCL on Windows, you need WSL."
  },
  {
    "objectID": "installation.html#introduction",
    "href": "installation.html#introduction",
    "title": "LAGOON-MCL",
    "section": "",
    "text": "LAGOON-MCL uses Nextflow as workflow manager, and Singlularity as container manager. If you’re using it on a cluster, Nextflow handles job submission (SLURM, PBS, …). To use LAGOON-MCL on Windows, you need WSL."
  },
  {
    "objectID": "installation.html#how-to-install-the-pipeline",
    "href": "installation.html#how-to-install-the-pipeline",
    "title": "LAGOON-MCL",
    "section": "How to install the pipeline",
    "text": "How to install the pipeline\n\nLocal installation\nCheck that Singularity and Nextflow are installed on your system.\ngit clone https://github.com/jroussea/lagoon-mcl.git\n\n\nBuilding containers\nbash script/containers/singularity.sh\nContainers can be found in: containers/\n\n\nDownload databases [optional]\nIt is possible to download, build and index the databases before running the pipeline for the first time.\nDatabase used by LAGOON-MCL :\n\nPfam\nESM Metagenomic Atlas\n\nYou’ll need MMseqs2, and two scripts are available in script/databse: pfam.sh and esm_atlas.sh.\nbash pfam.sh -o /path/to/your/database\n\nbash esm_atlas -o /path/to/your/database\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can use the Singularity MMseqs2 container you created earlier.\nsingularity run mmseqs2.sif bash pfam.sh -o /path/to/your/database\n\nsingularity run mmseqs2.sif bash esm_atlas.sh -o /path/to/your/database\n\n\n\n\n\nCluster configuration\nIf you are using LAGOON-MCL on a computing cluster, you will need to provide Nextflow with a configuration file specific to your system. Information on executors (SLURM, PBS, AWS, …) can be found in the executor section of the Nextflow documentation. For some institutes, this file is already referenced in nf-core/configs. If this is the case, you can download the file and use it with -c path/to/your/institute/config/file/institute_file.config when executing the pipeline."
  },
  {
    "objectID": "installation.html#test-the-pipeline",
    "href": "installation.html#test-the-pipeline",
    "title": "LAGOON-MCL",
    "section": "Test the pipeline",
    "text": "Test the pipeline\nnextflow run main.nf -profile test,singularity\nThis command line will use the FASTA files in test/fasta and the Pfam and ESM Metagenomic Atlas databases.\nFor more information on running the pipeline, please see the tutorial."
  },
  {
    "objectID": "benchmarks.html#lagoon-mcl",
    "href": "benchmarks.html#lagoon-mcl",
    "title": "LAGOON-MCL",
    "section": "LAGOON-MCL",
    "text": "LAGOON-MCL\nLAGOON-MCL benchmarks will be run on METdb. Seven tests will be carried out with different dataset sizes.\n* 10 transcriptomes\n* 50 transcriptomes\n* 100 transcriptomes\n* 200 transcriptomes\n* 300 transcriptomes\n* 400 transcriptomes\n* 463 transcriptomes"
  }
]