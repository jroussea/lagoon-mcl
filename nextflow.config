    // Load ressources and process parameters
includeConfig 'conf/base.config'

/*
* -------------------------------------------------
*  Nextflow config file for processes options
* -------------------------------------------------
* Defines general paths for input files and
* parameters for your own LAGOON-MCL analysis
*/

params {
    
    /* General parameters */
    help = false

    /* Ressources */
    max_cpus = 40
    max_memory = '110.GB'
    max_time = '336.h'

    /* General parameters */
    projectName = "lagoon-mcl_workdir"
    fasta =  null
    outdir = "$baseDir/results"

    /* HMMER - hmmsearch */
    Z = 10000000
    domE = 0.001
    incdomE = 0.001

    /* CATH database */
    gene3d_aln = null
    hmm_profile = null
    domain_list = null
    discontinuous = null

    /* Pfam database */
    pfam_aln = null
    pfam_db = null

    /* ESM Atlas */
    esm_atlas = false
    esm_aln = null
    esm_db = null

    /* AlphaFold Database */
    alphafold = false
    alphafold_aln = null
    alphafold_db = null

    /* Other information */
    annotation_files = null

    taxonomy_files = null

    /* Diamond BLASTp */
    alignment_file = null
    sensitivity = "sensitive"
    matrix = "BLOSUM62"
    diamond_evalue = 0.001

    /* MCL */
    I = "1.4,2,4"
    max_weight = 350 
    cluster_size = 3
}

// Capture exit codes from upstream processes when piping
//process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Execution profiles
profiles {
	test { 
        includeConfig 'conf/test.config'
    }
	singularity {
		singularity.autoMounts = true
		singularity.enabled = true
		process {
            withLabel: lagoon {
			    container = "$projectDir/containers/lagoon-mcl/lagoon-mcl.sif"
                containerOptions = "--env XDG_CACHE_HOME=tmp/quarto_cache_home --env XDG_DATA_HOME=tmp/quarto_data_home --env QUARTO_PRINT_STACK=true"
            }
            withLabel: diamond {
			    container = "$projectDir/containers/diamond/2.1.8/diamond.sif"
            }
            withLabel: cath {
			    container = "$projectDir/containers/cath-tools/0.16.5/cath-tools.sif"
            }
            withLabel: hmmer {
			    container = "$projectDir/containers/hmmer/3.4/hmmer.sif"
            }
            withLabel: mcl {
			    container = "$projectDir/containers/mcl/22.282/mcl.sif"
            }
            withLabel: seqkit {
                container = "$projectDir/containers/seqkit/2.8.2/seqkit.sif"
            }
		}
		workDir = "$projectDir/workdir/$params.projectName"
	}
	conda {
		conda.enabled = true
		process {
            withLabel: lagoon {
			    conda = "$projectDir/containers/lagoon-mcl/lagoon-mcl.yml"
            }
            withLabel: diamond {
			    conda = "$projectDir/containers/diamond/2.1.8/diamond.yml"
            }
            withLabel: cath {
			    conda = "$projectDir/containers/cath-tools/0.16.5/cath-tools.yml"
            }
            withLabel: hmmer {
			    conda = "$projectDir/containers/hmmer/3.4/hmmer.yml"
            }
            withLabel: mcl {
			    conda = "$projectDir/containers/mcl/22.282/mcl.yml"
            }
		}
		workDir = "$projectDir/workdir/$params.projectName"
	}
	mamba {
		conda.enabled = true
        conda.useMamba = true
		process {
            withLabel: lagoon {
			    conda = "$projectDir/containers/lagoon-mcl/lagoon-mcl.yml"
            }
            withLabel: diamond {
			    conda = "$projectDir/containers/diamond/2.1.8/diamond.yml"
            }
            withLabel: cath {
			    conda = "$projectDir/containers/cath-tools/0.16.5/cath-tools.yml"
            }
            withLabel: hmmer {
			    conda = "$projectDir/containers/hmmer/3.4/hmmer.yml"
            }
            withLabel: mcl {
			    conda = "$projectDir/containers/mcl/22.282/mcl.yml"
            }
		}
		workDir = "$projectDir/workdir/$params.projectName"
	}
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/reports/report_${trace_timestamp}.html"
}
// create a diagram of tasks
dag {
    enabled = true
    file = "${params.outdir}/reports/dag_${trace_timestamp}.html"
}
// produce a timeline report in html : timeline.html
timeline {
    enabled = true
    file = "${params.outdir}/reports/timeline_${trace_timestamp}.html"
}
// enable trace to get a detailed report on each task trace.txt
trace {
    enabled = true
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,env,workdir,script,scratch,error_action'
    file = "${params.outdir}/reports/trace_${trace_timestamp}.tsv"
    sep = '\t'
}

manifest {
    name            = 'jroussea/lagoon-mcl'
    author          = """Jeremy Rousseau"""
    homePage        = 'https://github.com/jroussea/lagoon-mcl'
    description     = """LArge cOmparatie Omics Network"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    version         = '1.0.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
