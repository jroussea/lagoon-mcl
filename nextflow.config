// Load ressources and process parameters
includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

// Capture exit codes from upstream processes when piping
//process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Execution profiles
profiles {

	custom { 
        includeConfig 'conf/custom-faure.config'
    }
	
    test { 
        includeConfig 'conf/test.config'
    }
    
    test_full {
        includeConfig 'conf/test_full.config'
    }
	
    singularity {
		singularity.autoMounts = true
		singularity.enabled = true
		process {
            withLabel: lagoon {
                container = "$projectDir/containers/lagoon-mcl/1.1.0/lagoon-mcl.sif"
                containerOptions = "--env XDG_CACHE_HOME=tmp/quarto_cache_home --env XDG_DATA_HOME=tmp/quarto_data_home --env QUARTO_PRINT_STACK=true"
            }
            withLabel: diamond {
                container = "$projectDir/containers/diamond/2.1.10/diamond.sif"
            }
            withLabel: mcl {
                container = "$projectDir/containers/mcl/22.282/mcl.sif"
            }
            withLabel: seqkit {
                container = "$projectDir/containers/seqkit/2.9.0/seqkit.sif"
            }
            withLabel: mmseqs {
                container = "$projectDir/containers/mmseqs2/15.6f452/mmseqs.sif"
            }
		}
		workDir = "$projectDir/workdir/$params.projectName"
    }
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/nextflow_reports/report_${trace_timestamp}.svg"
}
// create a diagram of tasks
dag {
    enabled = true
    file = "${params.outdir}/nextflow_reports/dag_${trace_timestamp}.html"
    //file = "${params.outdir}/reports/dag_${trace_timestamp}.svg"
}
// produce a timeline report in html : timeline.html
timeline {
    enabled = true
    file = "${params.outdir}/nextflow_reports/timeline_${trace_timestamp}.html"
}
// enable trace to get a detailed report on each task trace.txt
trace {
    enabled = true
    fields = 'task_id,hash,native_id,name,status,exit,time,attempt,submit,start,complete,duration,realtime,cpus,%cpu,%mem,rss,peak_rss,vmem,peak_vmem,disk,queue'
    file = "${params.outdir}/nextflow_reports/trace_${trace_timestamp}.tsv"
    sep = '\t'
}

manifest {
    name            = 'jroussea/lagoon-mcl'
    author          = """Jeremy Rousseau"""
    homePage        = 'https://github.com/jroussea/lagoon-mcl'
    description     = """LArge cOmparatie Omics Network"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    version         = '1.0.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
